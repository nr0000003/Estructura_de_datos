import heapq
import networkx as nx

def dijkstra(graph, start):
    queue = [(0, start)]
    distances = {node: float('inf') for node in graph}
    distances[start] = 0

    while queue:
        current_distance, current_node = heapq.heappop(queue)

        if current_distance > distances[current_node]:
            continue

        for neighbor, weight in graph[current_node].items():
            distance = current_distance + weight
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                heapq.heappush(queue, (distance, neighbor))

    return distances

def floyd_warshall(graph):
    nodes = list(graph.keys())
    n = len(nodes)
    dist = {i: {j: float('inf') if i != j else 0 for j in nodes} for i in nodes}

    for u in graph:
        for v, w in graph[u].items():
            dist[u][v] = w

    for k in nodes:
        for i in nodes:
            for j in nodes:
                dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])

    return dist

def warshall(graph):
    nodes = list(graph.keys())
    reach = {i: {j: 1 if j in graph[i] else 0 for j in nodes} for i in nodes}

    for k in nodes:
        for i in nodes:
            for j in nodes:
                reach[i][j] = reach[i][j] or (reach[i][k] and reach[k][j])

    return reach

def kruskal(graph):
    edges = [(weight, u, v) for u in graph for v, weight in graph[u].items()]
    edges.sort()
    tree = []
    parent = {node: node for node in graph}

    def find(node):
        while parent[node] != node:
            node = parent[node]
        return node

    for weight, u, v in edges:
        root_u, root_v = find(u), find(v)
        if root_u != root_v:
            tree.append((u, v, weight))
            parent[root_u] = root_v

    return tree

graph = {
    'A': {'B': 1, 'C': 4},
    'B': {'A': 1, 'C': 2, 'D': 5},
    'C': {'A': 4, 'B': 2, 'D': 1},
    'D': {'B': 5, 'C': 1}
}

print("\nDijkstra desde A:", dijkstra(graph, 'A'))
print("\nFloyd-Warshall:", floyd_warshall(graph))
print("\nWarshall:", warshall(graph))
print("\nKruskal:", kruskal(graph))
